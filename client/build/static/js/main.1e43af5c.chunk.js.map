{"version":3,"sources":["pages/LinksPage.js","hooks/http.hook.js","context/AuthContext.js","pages/CreatePage.js","pages/DetailPage.js","pages/AuthPage.js","hooks/message.hook.js","hooks/auth.hook.js","components/Navbar.js","App.js","routes.js","serviceWorker.js","index.js"],"names":["LinksPage","useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","clear","AuthContext","createContext","token","userId","login","logout","isAuthenticated","CreatePage","history","useHistory","auth","useContext","link","setLink","useEffect","window","M","updateTextFields","pressHandler","event","key","from","Authorization","console","log","push","_id","className","style","paddingTop","placeholder","id","type","value","onChange","e","target","onKeyPress","htmlFor","DetailPage","AuthPage","text","toast","html","email","password","form","setForm","changeHandler","name","registerHandler","loginHandler","marginRight","disabled","onClick","storageName","Navbar","padding","to","href","preventDefault","App","setToken","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","useRoutes","Provider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e43af5c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const LinksPage = () => {\r\n    return(\r\n        <div>\r\n            <h1> LinksPage </h1>\r\n        </div>\r\n    )\r\n}","import {useState, useCallback} from 'react'\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n    setLoading(true)\r\n    try {\r\n      if (body) {\r\n        body = JSON.stringify(body)\r\n        headers['Content-Type'] = 'application/json'\r\n      }\r\n\r\n      const response = await fetch(url, {method, body, headers})\r\n      const data = await response.json()\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Что-то пошло не так')\r\n      }\r\n\r\n      setLoading(false)\r\n\r\n      return data\r\n    } catch (e) {\r\n      setLoading(false)\r\n      setError(e.message)\r\n      throw e\r\n    }\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => setError(null), [])\r\n\r\n  return { loading, request, error, clearError }\r\n}","import {createContext} from 'react'\r\n\r\n\r\nfunction clear() {}\r\n\r\nexport const AuthContext = createContext({\r\n    token: null,\r\n    userId:null,\r\n    login: clear,\r\n    logout: clear,\r\n    isAuthenticated: false\r\n}) ","import React, {useContext, useEffect, useState} from 'react'\r\nimport {useHttp} from '../hooks/http.hook'\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nexport const CreatePage = () => {\r\n  const history = useHistory()\r\n  const auth = useContext(AuthContext)\r\n  const {request} = useHttp()\r\n  const [link, setLink] = useState('')\r\n\r\n  useEffect(() => {\r\n    window.M.updateTextFields()\r\n  }, [])\r\n\r\n  const pressHandler = async event => {\r\n    if (event.key === 'Enter') {\r\n      try {\r\n        const data = await request('/api/link/generate', 'POST', {from: link}, {\r\n          Authorization: `Bearer ${auth.token}`\r\n        })\r\n        console.log(data)\r\n        history.push(`/detail/${data.link._id}`)\r\n      } catch (e) {}\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col s8 offset-s2\" style={{paddingTop: '2rem'}}>\r\n        <div className=\"input-field\">\r\n          <input\r\n            placeholder=\"Wkliej link\"\r\n            id=\"link\"\r\n            type=\"text\"\r\n            value={link}\r\n            onChange={e => setLink(e.target.value)}\r\n            onKeyPress={pressHandler}\r\n          />\r\n          <label htmlFor=\"link\">Wkliej link</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport const DetailPage = () => {\r\n    return (\r\n        <div>\r\n            <h1> DetailPage </h1>\r\n        </div>\r\n    )\r\n}","import React, {useContext, useEffect, useState} from 'react'\r\nimport {useHttp} from '../hooks/http.hook'\r\nimport {useMessage} from '../hooks/message.hook'\r\nimport {AuthContext} from '../context/AuthContext'\r\n\r\nexport const AuthPage = () => {\r\n  const auth = useContext(AuthContext)\r\n  const message = useMessage()\r\n  const {loading, request, error, clearError} = useHttp()\r\n  const [form, setForm] = useState({\r\n    email: '', password: ''\r\n  })\r\n\r\n  useEffect(() => {\r\n    message(error)\r\n    clearError()\r\n  }, [error, message, clearError])\r\n\r\n  useEffect(() => {\r\n    window.M.updateTextFields()\r\n  }, [])\r\n\r\n\r\n  //тутачки и есть сама функция для изменения формы, spread оператором вытягиваем текст из формы\r\n  // присваивается значения к полям name в форме [event.target.name]: event.target.value \r\n  const changeHandler = event => {\r\n    setForm({ ...form, [event.target.name]: event.target.value })\r\n  }\r\n\r\n  const registerHandler = async () => {\r\n    try {\r\n      const data = await request('/api/auth/register', 'POST', {...form})\r\n      message(data.message)\r\n    } catch (e) {}\r\n  }\r\n\r\n  const loginHandler = async () => {\r\n    try {\r\n      const data = await request('/api/auth/login', 'POST', {...form})\r\n      auth.login(data.token, data.userId)\r\n    } catch (e) {}\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col s6 offset-s3\">\r\n        <h1>Skróć link</h1>\r\n        <div className=\"card blue darken-1\">\r\n          <div className=\"card-content white-text\">\r\n            <span className=\"card-title\">Zaloguj sie</span>\r\n            <div>\r\n\r\n              <div className=\"input-field\">\r\n                <input\r\n                  placeholder=\"Wpisz email\"\r\n                  id=\"email\"\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  className=\"yellow-input\"\r\n                  value={form.email}\r\n                  onChange={changeHandler}\r\n                />\r\n                <label htmlFor=\"email\">Email</label>\r\n              </div>\r\n\r\n              <div className=\"input-field\">\r\n                <input\r\n                  placeholder=\"Wpisz hasło\"\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  className=\"yellow-input\"\r\n                  value={form.password}\r\n                  onChange={changeHandler}\r\n                />\r\n                <label htmlFor=\"email\">Hasło</label>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n          <div className=\"card-action\">\r\n            <button\r\n              className=\"btn yellow darken-4\"\r\n              style={{marginRight: 10}}\r\n              disabled={loading}\r\n              onClick={loginHandler}\r\n            >\r\n              Zaloguj sie\r\n            </button>\r\n            <button\r\n              className=\"btn grey lighten-1 black-text\"\r\n              onClick={registerHandler}\r\n              disabled={loading}\r\n            >\r\n              Zarejestruj sie\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n // <div>\r\n        //     <div className=\"row\">\r\n        //         <div className=\"col need-hide\" style={{\r\n        //             backgroundImage: \"url(\" + \"https://source.unsplash.com/random\" + \")\", backgroundPosition: 'center',\r\n        //             backgroundSize: 'cover', height: '100vh'\r\n        //         }}>\r\n        //         </div>\r\n        //         <div className=\"col\" style={{ marginTop: '10vh' }}>\r\n        //             <form style={{ margin: '5vh' }}>\r\n        //                 <h2 style={{ position: 'center' }}>Zaloguj sie</h2>\r\n        //                 <div className=\"card\" class=\"border-0\">\r\n        //                     <div className=\"card-content white-text\">\r\n\r\n        //                         <div>\r\n\r\n        //                             <div className=\"input-field col s12\">\r\n        //                                 <input\r\n        //                                     id=\"email\"\r\n        //                                     type=\"text\"\r\n        //                                     name=\"email\"\r\n        //                                     className=\"yellow-input\"\r\n        //                                     onChange={changeHandler}\r\n        //                                 />\r\n        //                                 <label htmlFor=\"email\">Email</label>\r\n        //                             </div>\r\n\r\n        //                             <div className=\"input-field col s12\">\r\n        //                                 <input\r\n        //                                     id=\"password\"\r\n        //                                     type=\"password\"\r\n        //                                     name=\"password\"\r\n        //                                     className=\"yellow-input\"\r\n        //                                     onChange={changeHandler}\r\n        //                                 />\r\n        //                                 <label htmlFor=\"email\">Haslo</label>\r\n        //                             </div>\r\n\r\n        //                         </div>\r\n        //                         <p>\r\n        //                             <label>\r\n        //                                 <input type=\"checkbox\" />\r\n        //                                 <span>Zapamiętaj mnie</span>\r\n        //                             </label>\r\n        //                         </p>\r\n        //                     </div>\r\n        //                     <div className=\"card-action\">\r\n        //                         <button className=\"waves-effect teal lighten-2 btn\"\r\n        //                             style={{ width: '100%', marginTop: '10px' }}>\r\n        //                             Zaloguj się\r\n        //                             </button>\r\n        //                         <button className=\"waves-effect teal lighten-4 btn\"\r\n        //                         onClick={registerHandler}\r\n        //                             style={{ width: '100%', marginTop: '10px' }}>\r\n        //                             Rejestracja\r\n        //                             </button>\r\n        //                     </div>\r\n        //                 </div>\r\n        //             </form>\r\n        //         </div>\r\n        //     </div>\r\n        // </div>\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {useCallback} from 'react'\r\n\r\nexport const useMessage = () => {\r\n  return useCallback(text => {\r\n    if (window.M && text) {\r\n      window.M.toast({ html: text })\r\n    }\r\n  }, [])\r\n}","import {useCallback, useState, useEffect} from 'react'\r\n\r\nconst storageName = 'userData'\r\n\r\nexport const useAuth = () => {\r\n\r\nconst [token, setToken] = useState(null)\r\nconst [userId, setUserId] = useState(null)\r\n\r\nconst login = useCallback((jwtToken, id)=> {\r\n\r\n    setToken(jwtToken)\r\n    setUserId(id)\r\n\r\n    localStorage.setItem(storageName, JSON.stringify({\r\n        userId: id, token: jwtToken\r\n    })) //апи браузера\r\n\r\n\r\n},[])\r\nconst logout = useCallback(()=> {\r\n\r\n\r\n    setToken(null)\r\n    setUserId(null)// просто удаляем токен и пользователя\r\n    localStorage.removeItem(storageName)\r\n\r\n},[])\r\n\r\n\r\nuseEffect(() => {\r\n     const data = JSON.parse(localStorage.getItem(storageName))\r\n        if (data && data.token) {\r\n            console.log(data.token , data.userId)\r\n        }\r\n    }, [login])\r\n\r\n\r\n\r\nreturn { login, logout, token, userId}\r\n\r\n}","import React, {useContext} from 'react'\r\nimport {NavLink, useHistory} from 'react-router-dom'\r\nimport {AuthContext} from '../context/AuthContext'\r\n\r\nexport const Navbar = () => {\r\n  const history = useHistory()\r\n  const auth = useContext(AuthContext)\r\n\r\n  const logoutHandler = event => {\r\n    event.preventDefault()\r\n    auth.logout()\r\n    history.push('/')\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper blue darken-1\" style={{ padding: '0 2rem' }}>\r\n        <span className=\"brand-logo\">RefLink</span>\r\n        <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n          <li><NavLink to=\"/create\">Utwórz link</NavLink></li>\r\n          <li><NavLink to=\"/links\">Linki</NavLink></li>\r\n          <li><a href=\"/\" onClick={logoutHandler}>Wylogój</a></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}","import React from 'react'\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\nimport {useRoutes} from './routes'\r\nimport {useAuth} from './hooks/auth.hook'\r\nimport {AuthContext} from './context/AuthContext'\r\nimport {Navbar} from './components/Navbar'\r\n\r\nimport 'materialize-css'\r\n\r\nfunction App() {\r\n  const {token, login, logout, userId} = useAuth()\r\n  const isAuthenticated = !!token\r\n  const routes = useRoutes(isAuthenticated)\r\n\r\n  // if (!ready) {\r\n  //   return <Loader />\r\n  // }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{\r\n      token, login, logout, userId, isAuthenticated\r\n    }}>\r\n      <Router>\r\n        { isAuthenticated && <Navbar /> }\r\n        <div className=\"container\">\r\n          {routes}\r\n        </div>\r\n      </Router>\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport {Switch, Route, Redirect} from 'react-router-dom'\r\nimport {LinksPage} from './pages/LinksPage'\r\nimport {CreatePage} from './pages/CreatePage'\r\nimport {DetailPage} from './pages/DetailPage'\r\nimport {AuthPage} from './pages/AuthPage'\r\n\r\nexport const useRoutes = isAuthenticated => {\r\n  if (isAuthenticated) {\r\n    return (\r\n      <Switch>\r\n        <Route path=\"/links\" exact>\r\n          <LinksPage />\r\n        </Route>\r\n        <Route path=\"/create\" exact>\r\n          <CreatePage />\r\n        </Route>\r\n        <Route path=\"/detail/:id\">\r\n          <DetailPage />\r\n        </Route>\r\n        <Redirect to=\"/create\" />\r\n      </Switch>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\" exact>\r\n        <AuthPage />\r\n      </Route>\r\n      <Redirect to=\"/\" />\r\n    </Switch>\r\n  )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}